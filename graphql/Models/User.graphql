type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    is_active: Boolean!
    is_admin: Boolean! @method(name: "is_admin")
    roles: [Role]! @morphToMany
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime
}

input UserInput {
    id: ID
    name: String
    email: String
    password: String
    is_active: Boolean
}

input ConnectUserRelation {
    id: ID
    connect: ID
    upsert: UserInput
    delete: ID
}

input RegisterInput {
    name: String
    email: String
    password: String
}

input SortInput {
    column: String
    direction: String
}

input FilterInput {
    key: String
    value: String
    label: String
}

type Query {
    users: [User]! @all
    usersPaginate(
        search: String @scope(name: "search")
        sort: SortInput @scope(name: "sort")
        filter: [FilterInput] @scope(name: "filter")
    ): [User]! @paginate
}

type Mutation {
    registerUser(input: RegisterInput! @spread): User! @create
    upsertUser(input: UserInput! @spread): User! @upsert
    deleteUser(id: [ID!] @eq): [User] @delete
    restoreUser(id: ID!): User! @restore
}


